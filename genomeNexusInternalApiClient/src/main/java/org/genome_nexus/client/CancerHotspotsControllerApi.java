/*
 * Genome Nexus API
 * Genome Nexus Variant Annotation API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import org.genome_nexus.ApiCallback;
import org.genome_nexus.ApiClient;
import org.genome_nexus.ApiException;
import org.genome_nexus.ApiResponse;
import org.genome_nexus.Configuration;
import org.genome_nexus.Pair;
import org.genome_nexus.ProgressRequestBody;
import org.genome_nexus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.genome_nexus.client.AggregatedHotspots;
import org.genome_nexus.client.GenomicLocation;
import org.genome_nexus.client.Hotspot;
import org.genome_nexus.client.ProteinLocation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CancerHotspotsControllerApi {
    private ApiClient apiClient;

    public CancerHotspotsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CancerHotspotsControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for fetchHotspotAnnotationByGenomicLocationGET
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByGenomicLocationGETCall(String genomicLocation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/genomic/{genomicLocation}"
            .replaceAll("\\{" + "genomicLocation" + "\\}", apiClient.escapeString(genomicLocation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchHotspotAnnotationByGenomicLocationGETValidateBeforeCall(String genomicLocation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'genomicLocation' is set
        if (genomicLocation == null) {
            throw new ApiException("Missing the required parameter 'genomicLocation' when calling fetchHotspotAnnotationByGenomicLocationGET(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByGenomicLocationGETCall(genomicLocation, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves hotspot annotations for a specific genomic location
     * 
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @return List&lt;Hotspot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Hotspot> fetchHotspotAnnotationByGenomicLocationGET(String genomicLocation) throws ApiException {
        ApiResponse<List<Hotspot>> resp = fetchHotspotAnnotationByGenomicLocationGETWithHttpInfo(genomicLocation);
        return resp.getData();
    }

    /**
     * Retrieves hotspot annotations for a specific genomic location
     * 
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @return ApiResponse&lt;List&lt;Hotspot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Hotspot>> fetchHotspotAnnotationByGenomicLocationGETWithHttpInfo(String genomicLocation) throws ApiException {
        com.squareup.okhttp.Call call = fetchHotspotAnnotationByGenomicLocationGETValidateBeforeCall(genomicLocation, null, null);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for a specific genomic location (asynchronously)
     * 
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByGenomicLocationGETAsync(String genomicLocation, final ApiCallback<List<Hotspot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByGenomicLocationGETValidateBeforeCall(genomicLocation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchHotspotAnnotationByGenomicLocationPOST
     * @param genomicLocations List of genomic locations. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByGenomicLocationPOSTCall(List<GenomicLocation> genomicLocations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = genomicLocations;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/genomic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchHotspotAnnotationByGenomicLocationPOSTValidateBeforeCall(List<GenomicLocation> genomicLocations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'genomicLocations' is set
        if (genomicLocations == null) {
            throw new ApiException("Missing the required parameter 'genomicLocations' when calling fetchHotspotAnnotationByGenomicLocationPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByGenomicLocationPOSTCall(genomicLocations, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves hotspot annotations for the provided list of genomic locations
     * 
     * @param genomicLocations List of genomic locations. (required)
     * @return List&lt;AggregatedHotspots&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregatedHotspots> fetchHotspotAnnotationByGenomicLocationPOST(List<GenomicLocation> genomicLocations) throws ApiException {
        ApiResponse<List<AggregatedHotspots>> resp = fetchHotspotAnnotationByGenomicLocationPOSTWithHttpInfo(genomicLocations);
        return resp.getData();
    }

    /**
     * Retrieves hotspot annotations for the provided list of genomic locations
     * 
     * @param genomicLocations List of genomic locations. (required)
     * @return ApiResponse&lt;List&lt;AggregatedHotspots&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregatedHotspots>> fetchHotspotAnnotationByGenomicLocationPOSTWithHttpInfo(List<GenomicLocation> genomicLocations) throws ApiException {
        com.squareup.okhttp.Call call = fetchHotspotAnnotationByGenomicLocationPOSTValidateBeforeCall(genomicLocations, null, null);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for the provided list of genomic locations (asynchronously)
     * 
     * @param genomicLocations List of genomic locations. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByGenomicLocationPOSTAsync(List<GenomicLocation> genomicLocations, final ApiCallback<List<AggregatedHotspots>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByGenomicLocationPOSTValidateBeforeCall(genomicLocations, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchHotspotAnnotationByHgvsGET
     * @param variant A variant. For example 7:g.140453136A&gt;T (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByHgvsGETCall(String variant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/hgvs/{variant}"
            .replaceAll("\\{" + "variant" + "\\}", apiClient.escapeString(variant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchHotspotAnnotationByHgvsGETValidateBeforeCall(String variant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'variant' is set
        if (variant == null) {
            throw new ApiException("Missing the required parameter 'variant' when calling fetchHotspotAnnotationByHgvsGET(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByHgvsGETCall(variant, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves hotspot annotations for a specific variant
     * 
     * @param variant A variant. For example 7:g.140453136A&gt;T (required)
     * @return List&lt;Hotspot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Hotspot> fetchHotspotAnnotationByHgvsGET(String variant) throws ApiException {
        ApiResponse<List<Hotspot>> resp = fetchHotspotAnnotationByHgvsGETWithHttpInfo(variant);
        return resp.getData();
    }

    /**
     * Retrieves hotspot annotations for a specific variant
     * 
     * @param variant A variant. For example 7:g.140453136A&gt;T (required)
     * @return ApiResponse&lt;List&lt;Hotspot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Hotspot>> fetchHotspotAnnotationByHgvsGETWithHttpInfo(String variant) throws ApiException {
        com.squareup.okhttp.Call call = fetchHotspotAnnotationByHgvsGETValidateBeforeCall(variant, null, null);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for a specific variant (asynchronously)
     * 
     * @param variant A variant. For example 7:g.140453136A&gt;T (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByHgvsGETAsync(String variant, final ApiCallback<List<Hotspot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByHgvsGETValidateBeforeCall(variant, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchHotspotAnnotationByHgvsPOST
     * @param variants List of variants. For example [\&quot;7:g.140453136A&gt;T\&quot;,\&quot;12:g.25398285C&gt;A\&quot;] (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByHgvsPOSTCall(List<String> variants, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = variants;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/hgvs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchHotspotAnnotationByHgvsPOSTValidateBeforeCall(List<String> variants, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'variants' is set
        if (variants == null) {
            throw new ApiException("Missing the required parameter 'variants' when calling fetchHotspotAnnotationByHgvsPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByHgvsPOSTCall(variants, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves hotspot annotations for the provided list of variants
     * 
     * @param variants List of variants. For example [\&quot;7:g.140453136A&gt;T\&quot;,\&quot;12:g.25398285C&gt;A\&quot;] (required)
     * @return List&lt;AggregatedHotspots&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregatedHotspots> fetchHotspotAnnotationByHgvsPOST(List<String> variants) throws ApiException {
        ApiResponse<List<AggregatedHotspots>> resp = fetchHotspotAnnotationByHgvsPOSTWithHttpInfo(variants);
        return resp.getData();
    }

    /**
     * Retrieves hotspot annotations for the provided list of variants
     * 
     * @param variants List of variants. For example [\&quot;7:g.140453136A&gt;T\&quot;,\&quot;12:g.25398285C&gt;A\&quot;] (required)
     * @return ApiResponse&lt;List&lt;AggregatedHotspots&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregatedHotspots>> fetchHotspotAnnotationByHgvsPOSTWithHttpInfo(List<String> variants) throws ApiException {
        com.squareup.okhttp.Call call = fetchHotspotAnnotationByHgvsPOSTValidateBeforeCall(variants, null, null);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for the provided list of variants (asynchronously)
     * 
     * @param variants List of variants. For example [\&quot;7:g.140453136A&gt;T\&quot;,\&quot;12:g.25398285C&gt;A\&quot;] (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByHgvsPOSTAsync(List<String> variants, final ApiCallback<List<AggregatedHotspots>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByHgvsPOSTValidateBeforeCall(variants, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchHotspotAnnotationByProteinLocationsPOST
     * @param proteinLocations List of transcript id, protein start location, protein end location, mutation type. The mutation types are limited to &#39;Missense_Mutation&#39;, &#39;In_Frame_Ins&#39;, &#39;In_Frame_Del&#39;, &#39;Splice_Site&#39;, and &#39;Splice_Region&#39; (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByProteinLocationsPOSTCall(List<ProteinLocation> proteinLocations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = proteinLocations;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/proteinLocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchHotspotAnnotationByProteinLocationsPOSTValidateBeforeCall(List<ProteinLocation> proteinLocations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'proteinLocations' is set
        if (proteinLocations == null) {
            throw new ApiException("Missing the required parameter 'proteinLocations' when calling fetchHotspotAnnotationByProteinLocationsPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByProteinLocationsPOSTCall(proteinLocations, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript id, protein location and mutation type
     * 
     * @param proteinLocations List of transcript id, protein start location, protein end location, mutation type. The mutation types are limited to &#39;Missense_Mutation&#39;, &#39;In_Frame_Ins&#39;, &#39;In_Frame_Del&#39;, &#39;Splice_Site&#39;, and &#39;Splice_Region&#39; (required)
     * @return List&lt;AggregatedHotspots&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregatedHotspots> fetchHotspotAnnotationByProteinLocationsPOST(List<ProteinLocation> proteinLocations) throws ApiException {
        ApiResponse<List<AggregatedHotspots>> resp = fetchHotspotAnnotationByProteinLocationsPOSTWithHttpInfo(proteinLocations);
        return resp.getData();
    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript id, protein location and mutation type
     * 
     * @param proteinLocations List of transcript id, protein start location, protein end location, mutation type. The mutation types are limited to &#39;Missense_Mutation&#39;, &#39;In_Frame_Ins&#39;, &#39;In_Frame_Del&#39;, &#39;Splice_Site&#39;, and &#39;Splice_Region&#39; (required)
     * @return ApiResponse&lt;List&lt;AggregatedHotspots&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregatedHotspots>> fetchHotspotAnnotationByProteinLocationsPOSTWithHttpInfo(List<ProteinLocation> proteinLocations) throws ApiException {
        com.squareup.okhttp.Call call = fetchHotspotAnnotationByProteinLocationsPOSTValidateBeforeCall(proteinLocations, null, null);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript id, protein location and mutation type (asynchronously)
     * 
     * @param proteinLocations List of transcript id, protein start location, protein end location, mutation type. The mutation types are limited to &#39;Missense_Mutation&#39;, &#39;In_Frame_Ins&#39;, &#39;In_Frame_Del&#39;, &#39;Splice_Site&#39;, and &#39;Splice_Region&#39; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByProteinLocationsPOSTAsync(List<ProteinLocation> proteinLocations, final ApiCallback<List<AggregatedHotspots>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByProteinLocationsPOSTValidateBeforeCall(proteinLocations, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchHotspotAnnotationByTranscriptIdGET
     * @param transcriptId A Transcript Id. For example ENST00000288602 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByTranscriptIdGETCall(String transcriptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/transcript/{transcriptId}"
            .replaceAll("\\{" + "transcriptId" + "\\}", apiClient.escapeString(transcriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchHotspotAnnotationByTranscriptIdGETValidateBeforeCall(String transcriptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcriptId' is set
        if (transcriptId == null) {
            throw new ApiException("Missing the required parameter 'transcriptId' when calling fetchHotspotAnnotationByTranscriptIdGET(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByTranscriptIdGETCall(transcriptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves hotspot annotations for the provided transcript ID
     * 
     * @param transcriptId A Transcript Id. For example ENST00000288602 (required)
     * @return List&lt;Hotspot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Hotspot> fetchHotspotAnnotationByTranscriptIdGET(String transcriptId) throws ApiException {
        ApiResponse<List<Hotspot>> resp = fetchHotspotAnnotationByTranscriptIdGETWithHttpInfo(transcriptId);
        return resp.getData();
    }

    /**
     * Retrieves hotspot annotations for the provided transcript ID
     * 
     * @param transcriptId A Transcript Id. For example ENST00000288602 (required)
     * @return ApiResponse&lt;List&lt;Hotspot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Hotspot>> fetchHotspotAnnotationByTranscriptIdGETWithHttpInfo(String transcriptId) throws ApiException {
        com.squareup.okhttp.Call call = fetchHotspotAnnotationByTranscriptIdGETValidateBeforeCall(transcriptId, null, null);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for the provided transcript ID (asynchronously)
     * 
     * @param transcriptId A Transcript Id. For example ENST00000288602 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByTranscriptIdGETAsync(String transcriptId, final ApiCallback<List<Hotspot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByTranscriptIdGETValidateBeforeCall(transcriptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchHotspotAnnotationByTranscriptIdPOST
     * @param transcriptIds List of transcript Id. For example [\&quot;ENST00000288602\&quot;,\&quot;ENST00000256078\&quot;] (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByTranscriptIdPOSTCall(List<String> transcriptIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transcriptIds;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/transcript";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchHotspotAnnotationByTranscriptIdPOSTValidateBeforeCall(List<String> transcriptIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcriptIds' is set
        if (transcriptIds == null) {
            throw new ApiException("Missing the required parameter 'transcriptIds' when calling fetchHotspotAnnotationByTranscriptIdPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByTranscriptIdPOSTCall(transcriptIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript ID
     * 
     * @param transcriptIds List of transcript Id. For example [\&quot;ENST00000288602\&quot;,\&quot;ENST00000256078\&quot;] (required)
     * @return List&lt;AggregatedHotspots&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregatedHotspots> fetchHotspotAnnotationByTranscriptIdPOST(List<String> transcriptIds) throws ApiException {
        ApiResponse<List<AggregatedHotspots>> resp = fetchHotspotAnnotationByTranscriptIdPOSTWithHttpInfo(transcriptIds);
        return resp.getData();
    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript ID
     * 
     * @param transcriptIds List of transcript Id. For example [\&quot;ENST00000288602\&quot;,\&quot;ENST00000256078\&quot;] (required)
     * @return ApiResponse&lt;List&lt;AggregatedHotspots&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregatedHotspots>> fetchHotspotAnnotationByTranscriptIdPOSTWithHttpInfo(List<String> transcriptIds) throws ApiException {
        com.squareup.okhttp.Call call = fetchHotspotAnnotationByTranscriptIdPOSTValidateBeforeCall(transcriptIds, null, null);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript ID (asynchronously)
     * 
     * @param transcriptIds List of transcript Id. For example [\&quot;ENST00000288602\&quot;,\&quot;ENST00000256078\&quot;] (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchHotspotAnnotationByTranscriptIdPOSTAsync(List<String> transcriptIds, final ApiCallback<List<AggregatedHotspots>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchHotspotAnnotationByTranscriptIdPOSTValidateBeforeCall(transcriptIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
