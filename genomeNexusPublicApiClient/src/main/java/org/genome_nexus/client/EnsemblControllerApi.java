/*
 * Genome Nexus API
 * Genome Nexus Variant Annotation API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import org.genome_nexus.ApiCallback;
import org.genome_nexus.ApiClient;
import org.genome_nexus.ApiException;
import org.genome_nexus.ApiResponse;
import org.genome_nexus.Configuration;
import org.genome_nexus.Pair;
import org.genome_nexus.ProgressRequestBody;
import org.genome_nexus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.genome_nexus.client.EnsemblFilter;
import org.genome_nexus.client.EnsemblGene;
import org.genome_nexus.client.EnsemblTranscript;
import org.genome_nexus.client.GeneXref;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnsemblControllerApi {
    private ApiClient apiClient;

    public EnsemblControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnsemblControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for fetchCanonicalEnsemblGeneIdByEntrezGeneIdGET
     * @param entrezGeneId An Entrez Gene Id. For example 23140 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETCall(String entrezGeneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-gene/entrez/{entrezGeneId}"
            .replaceAll("\\{" + "entrezGeneId" + "\\}", apiClient.escapeString(entrezGeneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETValidateBeforeCall(String entrezGeneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entrezGeneId' is set
        if (entrezGeneId == null) {
            throw new ApiException("Missing the required parameter 'entrezGeneId' when calling fetchCanonicalEnsemblGeneIdByEntrezGeneIdGET(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETCall(entrezGeneId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves Ensembl canonical gene id by Entrez Gene Id
     * 
     * @param entrezGeneId An Entrez Gene Id. For example 23140 (required)
     * @return EnsemblGene
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnsemblGene fetchCanonicalEnsemblGeneIdByEntrezGeneIdGET(String entrezGeneId) throws ApiException {
        ApiResponse<EnsemblGene> resp = fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETWithHttpInfo(entrezGeneId);
        return resp.getData();
    }

    /**
     * Retrieves Ensembl canonical gene id by Entrez Gene Id
     * 
     * @param entrezGeneId An Entrez Gene Id. For example 23140 (required)
     * @return ApiResponse&lt;EnsemblGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnsemblGene> fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETWithHttpInfo(String entrezGeneId) throws ApiException {
        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETValidateBeforeCall(entrezGeneId, null, null);
        Type localVarReturnType = new TypeToken<EnsemblGene>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves Ensembl canonical gene id by Entrez Gene Id (asynchronously)
     * 
     * @param entrezGeneId An Entrez Gene Id. For example 23140 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETAsync(String entrezGeneId, final ApiCallback<EnsemblGene> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETValidateBeforeCall(entrezGeneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnsemblGene>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOST
     * @param entrezGeneIds List of Entrez Gene Ids. For example [\&quot;23140\&quot;,\&quot;26009\&quot;,\&quot;100131879\&quot;] (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTCall(List<String> entrezGeneIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entrezGeneIds;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-gene/entrez";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTValidateBeforeCall(List<String> entrezGeneIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entrezGeneIds' is set
        if (entrezGeneIds == null) {
            throw new ApiException("Missing the required parameter 'entrezGeneIds' when calling fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTCall(entrezGeneIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves canonical Ensembl Gene ID by Entrez Gene Ids
     * 
     * @param entrezGeneIds List of Entrez Gene Ids. For example [\&quot;23140\&quot;,\&quot;26009\&quot;,\&quot;100131879\&quot;] (required)
     * @return List&lt;EnsemblGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EnsemblGene> fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOST(List<String> entrezGeneIds) throws ApiException {
        ApiResponse<List<EnsemblGene>> resp = fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTWithHttpInfo(entrezGeneIds);
        return resp.getData();
    }

    /**
     * Retrieves canonical Ensembl Gene ID by Entrez Gene Ids
     * 
     * @param entrezGeneIds List of Entrez Gene Ids. For example [\&quot;23140\&quot;,\&quot;26009\&quot;,\&quot;100131879\&quot;] (required)
     * @return ApiResponse&lt;List&lt;EnsemblGene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EnsemblGene>> fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTWithHttpInfo(List<String> entrezGeneIds) throws ApiException {
        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTValidateBeforeCall(entrezGeneIds, null, null);
        Type localVarReturnType = new TypeToken<List<EnsemblGene>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves canonical Ensembl Gene ID by Entrez Gene Ids (asynchronously)
     * 
     * @param entrezGeneIds List of Entrez Gene Ids. For example [\&quot;23140\&quot;,\&quot;26009\&quot;,\&quot;100131879\&quot;] (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTAsync(List<String> entrezGeneIds, final ApiCallback<List<EnsemblGene>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTValidateBeforeCall(entrezGeneIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EnsemblGene>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchCanonicalEnsemblGeneIdByHugoSymbolGET
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByHugoSymbolGETCall(String hugoSymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-gene/hgnc/{hugoSymbol}"
            .replaceAll("\\{" + "hugoSymbol" + "\\}", apiClient.escapeString(hugoSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByHugoSymbolGETValidateBeforeCall(String hugoSymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hugoSymbol' is set
        if (hugoSymbol == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbol' when calling fetchCanonicalEnsemblGeneIdByHugoSymbolGET(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByHugoSymbolGETCall(hugoSymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves Ensembl canonical gene id by Hugo Symbol
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @return EnsemblGene
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnsemblGene fetchCanonicalEnsemblGeneIdByHugoSymbolGET(String hugoSymbol) throws ApiException {
        ApiResponse<EnsemblGene> resp = fetchCanonicalEnsemblGeneIdByHugoSymbolGETWithHttpInfo(hugoSymbol);
        return resp.getData();
    }

    /**
     * Retrieves Ensembl canonical gene id by Hugo Symbol
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @return ApiResponse&lt;EnsemblGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnsemblGene> fetchCanonicalEnsemblGeneIdByHugoSymbolGETWithHttpInfo(String hugoSymbol) throws ApiException {
        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByHugoSymbolGETValidateBeforeCall(hugoSymbol, null, null);
        Type localVarReturnType = new TypeToken<EnsemblGene>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves Ensembl canonical gene id by Hugo Symbol (asynchronously)
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByHugoSymbolGETAsync(String hugoSymbol, final ApiCallback<EnsemblGene> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByHugoSymbolGETValidateBeforeCall(hugoSymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnsemblGene>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchCanonicalEnsemblGeneIdByHugoSymbolsPOST
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTCall(List<String> hugoSymbols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hugoSymbols;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-gene/hgnc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTValidateBeforeCall(List<String> hugoSymbols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hugoSymbols' is set
        if (hugoSymbols == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbols' when calling fetchCanonicalEnsemblGeneIdByHugoSymbolsPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTCall(hugoSymbols, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves canonical Ensembl Gene ID by Hugo Symbols
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @return List&lt;EnsemblGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EnsemblGene> fetchCanonicalEnsemblGeneIdByHugoSymbolsPOST(List<String> hugoSymbols) throws ApiException {
        ApiResponse<List<EnsemblGene>> resp = fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTWithHttpInfo(hugoSymbols);
        return resp.getData();
    }

    /**
     * Retrieves canonical Ensembl Gene ID by Hugo Symbols
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @return ApiResponse&lt;List&lt;EnsemblGene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EnsemblGene>> fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTWithHttpInfo(List<String> hugoSymbols) throws ApiException {
        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTValidateBeforeCall(hugoSymbols, null, null);
        Type localVarReturnType = new TypeToken<List<EnsemblGene>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves canonical Ensembl Gene ID by Hugo Symbols (asynchronously)
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTAsync(List<String> hugoSymbols, final ApiCallback<List<EnsemblGene>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTValidateBeforeCall(hugoSymbols, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EnsemblGene>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchCanonicalEnsemblTranscriptByHugoSymbolGET
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblTranscriptByHugoSymbolGETCall(String hugoSymbol, String isoformOverrideSource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-transcript/hgnc/{hugoSymbol}"
            .replaceAll("\\{" + "hugoSymbol" + "\\}", apiClient.escapeString(hugoSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isoformOverrideSource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchCanonicalEnsemblTranscriptByHugoSymbolGETValidateBeforeCall(String hugoSymbol, String isoformOverrideSource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hugoSymbol' is set
        if (hugoSymbol == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbol' when calling fetchCanonicalEnsemblTranscriptByHugoSymbolGET(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblTranscriptByHugoSymbolGETCall(hugoSymbol, isoformOverrideSource, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves Ensembl canonical transcript by Hugo Symbol
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @return EnsemblTranscript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnsemblTranscript fetchCanonicalEnsemblTranscriptByHugoSymbolGET(String hugoSymbol, String isoformOverrideSource) throws ApiException {
        ApiResponse<EnsemblTranscript> resp = fetchCanonicalEnsemblTranscriptByHugoSymbolGETWithHttpInfo(hugoSymbol, isoformOverrideSource);
        return resp.getData();
    }

    /**
     * Retrieves Ensembl canonical transcript by Hugo Symbol
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @return ApiResponse&lt;EnsemblTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnsemblTranscript> fetchCanonicalEnsemblTranscriptByHugoSymbolGETWithHttpInfo(String hugoSymbol, String isoformOverrideSource) throws ApiException {
        com.squareup.okhttp.Call call = fetchCanonicalEnsemblTranscriptByHugoSymbolGETValidateBeforeCall(hugoSymbol, isoformOverrideSource, null, null);
        Type localVarReturnType = new TypeToken<EnsemblTranscript>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves Ensembl canonical transcript by Hugo Symbol (asynchronously)
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblTranscriptByHugoSymbolGETAsync(String hugoSymbol, String isoformOverrideSource, final ApiCallback<EnsemblTranscript> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblTranscriptByHugoSymbolGETValidateBeforeCall(hugoSymbol, isoformOverrideSource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnsemblTranscript>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOST
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTCall(List<String> hugoSymbols, String isoformOverrideSource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hugoSymbols;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-transcript/hgnc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isoformOverrideSource != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTValidateBeforeCall(List<String> hugoSymbols, String isoformOverrideSource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hugoSymbols' is set
        if (hugoSymbols == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbols' when calling fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTCall(hugoSymbols, isoformOverrideSource, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves Ensembl canonical transcripts by Hugo Symbols
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @return List&lt;EnsemblTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EnsemblTranscript> fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOST(List<String> hugoSymbols, String isoformOverrideSource) throws ApiException {
        ApiResponse<List<EnsemblTranscript>> resp = fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTWithHttpInfo(hugoSymbols, isoformOverrideSource);
        return resp.getData();
    }

    /**
     * Retrieves Ensembl canonical transcripts by Hugo Symbols
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @return ApiResponse&lt;List&lt;EnsemblTranscript&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EnsemblTranscript>> fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTWithHttpInfo(List<String> hugoSymbols, String isoformOverrideSource) throws ApiException {
        com.squareup.okhttp.Call call = fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTValidateBeforeCall(hugoSymbols, isoformOverrideSource, null, null);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves Ensembl canonical transcripts by Hugo Symbols (asynchronously)
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTAsync(List<String> hugoSymbols, String isoformOverrideSource, final ApiCallback<List<EnsemblTranscript>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTValidateBeforeCall(hugoSymbols, isoformOverrideSource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchEnsemblTranscriptByTranscriptIdGET
     * @param transcriptId An Ensembl transcript ID. For example ENST00000361390 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchEnsemblTranscriptByTranscriptIdGETCall(String transcriptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/transcript/{transcriptId}"
            .replaceAll("\\{" + "transcriptId" + "\\}", apiClient.escapeString(transcriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchEnsemblTranscriptByTranscriptIdGETValidateBeforeCall(String transcriptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcriptId' is set
        if (transcriptId == null) {
            throw new ApiException("Missing the required parameter 'transcriptId' when calling fetchEnsemblTranscriptByTranscriptIdGET(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchEnsemblTranscriptByTranscriptIdGETCall(transcriptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the transcript by an Ensembl transcript ID
     * 
     * @param transcriptId An Ensembl transcript ID. For example ENST00000361390 (required)
     * @return EnsemblTranscript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnsemblTranscript fetchEnsemblTranscriptByTranscriptIdGET(String transcriptId) throws ApiException {
        ApiResponse<EnsemblTranscript> resp = fetchEnsemblTranscriptByTranscriptIdGETWithHttpInfo(transcriptId);
        return resp.getData();
    }

    /**
     * Retrieves the transcript by an Ensembl transcript ID
     * 
     * @param transcriptId An Ensembl transcript ID. For example ENST00000361390 (required)
     * @return ApiResponse&lt;EnsemblTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnsemblTranscript> fetchEnsemblTranscriptByTranscriptIdGETWithHttpInfo(String transcriptId) throws ApiException {
        com.squareup.okhttp.Call call = fetchEnsemblTranscriptByTranscriptIdGETValidateBeforeCall(transcriptId, null, null);
        Type localVarReturnType = new TypeToken<EnsemblTranscript>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the transcript by an Ensembl transcript ID (asynchronously)
     * 
     * @param transcriptId An Ensembl transcript ID. For example ENST00000361390 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchEnsemblTranscriptByTranscriptIdGETAsync(String transcriptId, final ApiCallback<EnsemblTranscript> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchEnsemblTranscriptByTranscriptIdGETValidateBeforeCall(transcriptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnsemblTranscript>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchEnsemblTranscriptsByEnsemblFilterPOST
     * @param ensemblFilter List of Ensembl transcript IDs. For example [\&quot;ENST00000361390\&quot;, \&quot;ENST00000361453\&quot;, \&quot;ENST00000361624\&quot;]&lt;br&gt;OR&lt;br&gt;List of Hugo Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl protein IDs. For example [\&quot;ENSP00000439985\&quot;, \&quot;ENSP00000478460\&quot;, \&quot;ENSP00000346196\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl gene IDs. For example [\&quot;ENSG00000136999\&quot;, \&quot;ENSG00000272398\&quot;, \&quot;ENSG00000198695\&quot;] (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchEnsemblTranscriptsByEnsemblFilterPOSTCall(EnsemblFilter ensemblFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ensemblFilter;

        // create path and map variables
        String localVarPath = "/ensembl/transcript";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchEnsemblTranscriptsByEnsemblFilterPOSTValidateBeforeCall(EnsemblFilter ensemblFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ensemblFilter' is set
        if (ensemblFilter == null) {
            throw new ApiException("Missing the required parameter 'ensemblFilter' when calling fetchEnsemblTranscriptsByEnsemblFilterPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchEnsemblTranscriptsByEnsemblFilterPOSTCall(ensemblFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves Ensembl Transcripts by Ensembl transcript IDs, hugo Symbols, protein IDs, or gene IDs
     * 
     * @param ensemblFilter List of Ensembl transcript IDs. For example [\&quot;ENST00000361390\&quot;, \&quot;ENST00000361453\&quot;, \&quot;ENST00000361624\&quot;]&lt;br&gt;OR&lt;br&gt;List of Hugo Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl protein IDs. For example [\&quot;ENSP00000439985\&quot;, \&quot;ENSP00000478460\&quot;, \&quot;ENSP00000346196\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl gene IDs. For example [\&quot;ENSG00000136999\&quot;, \&quot;ENSG00000272398\&quot;, \&quot;ENSG00000198695\&quot;] (required)
     * @return List&lt;EnsemblTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EnsemblTranscript> fetchEnsemblTranscriptsByEnsemblFilterPOST(EnsemblFilter ensemblFilter) throws ApiException {
        ApiResponse<List<EnsemblTranscript>> resp = fetchEnsemblTranscriptsByEnsemblFilterPOSTWithHttpInfo(ensemblFilter);
        return resp.getData();
    }

    /**
     * Retrieves Ensembl Transcripts by Ensembl transcript IDs, hugo Symbols, protein IDs, or gene IDs
     * 
     * @param ensemblFilter List of Ensembl transcript IDs. For example [\&quot;ENST00000361390\&quot;, \&quot;ENST00000361453\&quot;, \&quot;ENST00000361624\&quot;]&lt;br&gt;OR&lt;br&gt;List of Hugo Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl protein IDs. For example [\&quot;ENSP00000439985\&quot;, \&quot;ENSP00000478460\&quot;, \&quot;ENSP00000346196\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl gene IDs. For example [\&quot;ENSG00000136999\&quot;, \&quot;ENSG00000272398\&quot;, \&quot;ENSG00000198695\&quot;] (required)
     * @return ApiResponse&lt;List&lt;EnsemblTranscript&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EnsemblTranscript>> fetchEnsemblTranscriptsByEnsemblFilterPOSTWithHttpInfo(EnsemblFilter ensemblFilter) throws ApiException {
        com.squareup.okhttp.Call call = fetchEnsemblTranscriptsByEnsemblFilterPOSTValidateBeforeCall(ensemblFilter, null, null);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves Ensembl Transcripts by Ensembl transcript IDs, hugo Symbols, protein IDs, or gene IDs (asynchronously)
     * 
     * @param ensemblFilter List of Ensembl transcript IDs. For example [\&quot;ENST00000361390\&quot;, \&quot;ENST00000361453\&quot;, \&quot;ENST00000361624\&quot;]&lt;br&gt;OR&lt;br&gt;List of Hugo Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl protein IDs. For example [\&quot;ENSP00000439985\&quot;, \&quot;ENSP00000478460\&quot;, \&quot;ENSP00000346196\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl gene IDs. For example [\&quot;ENSG00000136999\&quot;, \&quot;ENSG00000272398\&quot;, \&quot;ENSG00000198695\&quot;] (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchEnsemblTranscriptsByEnsemblFilterPOSTAsync(EnsemblFilter ensemblFilter, final ApiCallback<List<EnsemblTranscript>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchEnsemblTranscriptsByEnsemblFilterPOSTValidateBeforeCall(ensemblFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchEnsemblTranscriptsGET
     * @param geneId An Ensembl gene ID. For example ENSG00000136999 (optional)
     * @param proteinId An Ensembl protein ID. For example ENSP00000439985 (optional)
     * @param hugoSymbol A Hugo Symbol For example ARF5 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchEnsemblTranscriptsGETCall(String geneId, String proteinId, String hugoSymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/transcript";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (geneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("geneId", geneId));
        if (proteinId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proteinId", proteinId));
        if (hugoSymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hugoSymbol", hugoSymbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchEnsemblTranscriptsGETValidateBeforeCall(String geneId, String proteinId, String hugoSymbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = fetchEnsemblTranscriptsGETCall(geneId, proteinId, hugoSymbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves Ensembl Transcripts by protein ID, and gene ID. Retrieves all transcripts in case no query parameter provided
     * 
     * @param geneId An Ensembl gene ID. For example ENSG00000136999 (optional)
     * @param proteinId An Ensembl protein ID. For example ENSP00000439985 (optional)
     * @param hugoSymbol A Hugo Symbol For example ARF5 (optional)
     * @return List&lt;EnsemblTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EnsemblTranscript> fetchEnsemblTranscriptsGET(String geneId, String proteinId, String hugoSymbol) throws ApiException {
        ApiResponse<List<EnsemblTranscript>> resp = fetchEnsemblTranscriptsGETWithHttpInfo(geneId, proteinId, hugoSymbol);
        return resp.getData();
    }

    /**
     * Retrieves Ensembl Transcripts by protein ID, and gene ID. Retrieves all transcripts in case no query parameter provided
     * 
     * @param geneId An Ensembl gene ID. For example ENSG00000136999 (optional)
     * @param proteinId An Ensembl protein ID. For example ENSP00000439985 (optional)
     * @param hugoSymbol A Hugo Symbol For example ARF5 (optional)
     * @return ApiResponse&lt;List&lt;EnsemblTranscript&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EnsemblTranscript>> fetchEnsemblTranscriptsGETWithHttpInfo(String geneId, String proteinId, String hugoSymbol) throws ApiException {
        com.squareup.okhttp.Call call = fetchEnsemblTranscriptsGETValidateBeforeCall(geneId, proteinId, hugoSymbol, null, null);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves Ensembl Transcripts by protein ID, and gene ID. Retrieves all transcripts in case no query parameter provided (asynchronously)
     * 
     * @param geneId An Ensembl gene ID. For example ENSG00000136999 (optional)
     * @param proteinId An Ensembl protein ID. For example ENSP00000439985 (optional)
     * @param hugoSymbol A Hugo Symbol For example ARF5 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchEnsemblTranscriptsGETAsync(String geneId, String proteinId, String hugoSymbol, final ApiCallback<List<EnsemblTranscript>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchEnsemblTranscriptsGETValidateBeforeCall(geneId, proteinId, hugoSymbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchGeneXrefsGET
     * @param accession Ensembl gene accession. For example ENSG00000169083 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchGeneXrefsGETCall(String accession, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/xrefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accession != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accession", accession));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchGeneXrefsGETValidateBeforeCall(String accession, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accession' is set
        if (accession == null) {
            throw new ApiException("Missing the required parameter 'accession' when calling fetchGeneXrefsGET(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchGeneXrefsGETCall(accession, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Perform lookups of Ensembl identifiers and retrieve their external references in other databases
     * 
     * @param accession Ensembl gene accession. For example ENSG00000169083 (required)
     * @return List&lt;GeneXref&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GeneXref> fetchGeneXrefsGET(String accession) throws ApiException {
        ApiResponse<List<GeneXref>> resp = fetchGeneXrefsGETWithHttpInfo(accession);
        return resp.getData();
    }

    /**
     * Perform lookups of Ensembl identifiers and retrieve their external references in other databases
     * 
     * @param accession Ensembl gene accession. For example ENSG00000169083 (required)
     * @return ApiResponse&lt;List&lt;GeneXref&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GeneXref>> fetchGeneXrefsGETWithHttpInfo(String accession) throws ApiException {
        com.squareup.okhttp.Call call = fetchGeneXrefsGETValidateBeforeCall(accession, null, null);
        Type localVarReturnType = new TypeToken<List<GeneXref>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform lookups of Ensembl identifiers and retrieve their external references in other databases (asynchronously)
     * 
     * @param accession Ensembl gene accession. For example ENSG00000169083 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchGeneXrefsGETAsync(String accession, final ApiCallback<List<GeneXref>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchGeneXrefsGETValidateBeforeCall(accession, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GeneXref>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
