/*
 * Genome Nexus API
 * Genome Nexus Variant Annotation API
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import org.genome_nexus.ApiException;
import org.genome_nexus.client.GenomicLocation;
import org.genome_nexus.client.VariantAnnotation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnnotationControllerApi
 */
@Ignore
public class AnnotationControllerApiTest {

    private final AnnotationControllerApi api = new AnnotationControllerApi();

    
    /**
     * Retrieves VEP annotation for the provided genomic location
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationByGenomicLocationGETTest() throws ApiException {
        String genomicLocation = null;
        String isoformOverrideSource = null;
        List<String> fields = null;
        VariantAnnotation response = api.fetchVariantAnnotationByGenomicLocationGET(genomicLocation, isoformOverrideSource, fields);

        // TODO: test validations
    }
    
    /**
     * Retrieves VEP annotation for the provided list of genomic locations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationByGenomicLocationPOSTTest() throws ApiException {
        List<GenomicLocation> genomicLocations = null;
        String isoformOverrideSource = null;
        List<String> fields = null;
        List<VariantAnnotation> response = api.fetchVariantAnnotationByGenomicLocationPOST(genomicLocations, isoformOverrideSource, fields);

        // TODO: test validations
    }
    
    /**
     * Retrieves VEP annotation for the give dbSNP id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationByIdGETTest() throws ApiException {
        String variantId = null;
        String isoformOverrideSource = null;
        List<String> fields = null;
        VariantAnnotation response = api.fetchVariantAnnotationByIdGET(variantId, isoformOverrideSource, fields);

        // TODO: test validations
    }
    
    /**
     * Retrieves VEP annotation for the provided list of dbSNP ids
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationByIdPOSTTest() throws ApiException {
        List<String> variantIds = null;
        String isoformOverrideSource = null;
        List<String> fields = null;
        List<VariantAnnotation> response = api.fetchVariantAnnotationByIdPOST(variantIds, isoformOverrideSource, fields);

        // TODO: test validations
    }
    
    /**
     * Retrieves VEP annotation for the provided variant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationGETTest() throws ApiException {
        String variant = null;
        String isoformOverrideSource = null;
        List<String> fields = null;
        VariantAnnotation response = api.fetchVariantAnnotationGET(variant, isoformOverrideSource, fields);

        // TODO: test validations
    }
    
    /**
     * Retrieves VEP annotation for the provided list of variants
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationPOSTTest() throws ApiException {
        List<String> variants = null;
        String isoformOverrideSource = null;
        List<String> fields = null;
        List<VariantAnnotation> response = api.fetchVariantAnnotationPOST(variants, isoformOverrideSource, fields);

        // TODO: test validations
    }
    
}
